{"ast":null,"code":"import { USERS_CONSTANTS } from \"./action.type\";\nimport { URLS } from \"../../../constants/urls\";\nimport { apiRequest } from \"../../../components/common/apiRequests\";\n\nconst loadRequest = (pagination = false) => ({\n  type: USERS_CONSTANTS.USERS_LIST_LOAD_REQUEST,\n  pagination\n});\n\nconst loadFailure = (payload = \"error\") => ({\n  type: USERS_CONSTANTS.PRESENTATION_LOAD_FAILURE,\n  payload\n});\n\nconst loadSuccess = payload => {\n  let data = JSON.parse(payload.data).result;\n  return {\n    type: USERS_CONSTANTS.USERS_LIST_LOAD_SUCCESS,\n    data: data.presos,\n    stats: data.stats,\n    vendors: data.vendors\n  };\n};\n\nexport const getPresentations = (criteria, pagination = false) => {\n  let url = URLS.UserListURL;\n  return dispatch => {\n    dispatch(loadRequest(pagination));\n    apiRequest(\"GET\", url).then(result => {\n      console.log(\"Get users List\", result);\n      const data = JSON.parse(JSON.parse(result).data);\n      console.log(\"getUsers\", data);\n\n      if (data.error) {\n        dispatch(loadFailure(data.error));\n      } else {\n        dispatch(loadSuccess(JSON.parse(result)));\n      }\n    }).catch(err => {\n      console.log(\"Get user list error\", err);\n      dispatch(loadFailure(\"error\"));\n    });\n  };\n};","map":{"version":3,"sources":["/home/thinkitive/Documents/Interview Prep/Interview Demo/ShorelineP_Pravin-Shingade_ReactJs_Developer/pravin_shingade_react_assigment/src/store/reducers/users/action.js"],"names":["USERS_CONSTANTS","URLS","apiRequest","loadRequest","pagination","type","USERS_LIST_LOAD_REQUEST","loadFailure","payload","PRESENTATION_LOAD_FAILURE","loadSuccess","data","JSON","parse","result","USERS_LIST_LOAD_SUCCESS","presos","stats","vendors","getPresentations","criteria","url","UserListURL","dispatch","then","console","log","error","catch","err"],"mappings":"AAAA,SAASA,eAAT,QAAgC,eAAhC;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,UAAT,QAA2B,wCAA3B;;AAEA,MAAMC,WAAW,GAAG,CAACC,UAAU,GAAG,KAAd,MAAyB;AAC3CC,EAAAA,IAAI,EAAEL,eAAe,CAACM,uBADqB;AAE3CF,EAAAA;AAF2C,CAAzB,CAApB;;AAIA,MAAMG,WAAW,GAAG,CAACC,OAAO,GAAG,OAAX,MAAwB;AAC1CH,EAAAA,IAAI,EAAEL,eAAe,CAACS,yBADoB;AAE1CD,EAAAA;AAF0C,CAAxB,CAApB;;AAIA,MAAME,WAAW,GAAIF,OAAD,IAAa;AAC/B,MAAIG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACG,IAAnB,EAAyBG,MAApC;AACA,SAAO;AACLT,IAAAA,IAAI,EAAEL,eAAe,CAACe,uBADjB;AAELJ,IAAAA,IAAI,EAAEA,IAAI,CAACK,MAFN;AAGLC,IAAAA,KAAK,EAAEN,IAAI,CAACM,KAHP;AAILC,IAAAA,OAAO,EAAEP,IAAI,CAACO;AAJT,GAAP;AAMD,CARD;;AASA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAAWhB,UAAU,GAAG,KAAxB,KAAkC;AAChE,MAAIiB,GAAG,GAAGpB,IAAI,CAACqB,WAAf;AAEA,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACpB,WAAW,CAACC,UAAD,CAAZ,CAAR;AACAF,IAAAA,UAAU,CAAC,KAAD,EAAQmB,GAAR,CAAV,CACGG,IADH,CACSV,MAAD,IAAY;AAChBW,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BZ,MAA9B;AACA,YAAMH,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACC,KAAL,CAAWC,MAAX,EAAmBH,IAA9B,CAAb;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBf,IAAxB;;AACA,UAAIA,IAAI,CAACgB,KAAT,EAAgB;AACdJ,QAAAA,QAAQ,CAAChB,WAAW,CAACI,IAAI,CAACgB,KAAN,CAAZ,CAAR;AACD,OAFD,MAEO;AACLJ,QAAAA,QAAQ,CAACb,WAAW,CAACE,IAAI,CAACC,KAAL,CAAWC,MAAX,CAAD,CAAZ,CAAR;AACD;AACF,KAVH,EAWGc,KAXH,CAWUC,GAAD,IAAS;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCG,GAAnC;AACAN,MAAAA,QAAQ,CAAChB,WAAW,CAAC,OAAD,CAAZ,CAAR;AACD,KAdH;AAeD,GAjBD;AAkBD,CArBM","sourcesContent":["import { USERS_CONSTANTS } from \"./action.type\";\nimport { URLS } from \"../../../constants/urls\";\nimport { apiRequest } from \"../../../components/common/apiRequests\";\n\nconst loadRequest = (pagination = false) => ({\n  type: USERS_CONSTANTS.USERS_LIST_LOAD_REQUEST,\n  pagination,\n});\nconst loadFailure = (payload = \"error\") => ({\n  type: USERS_CONSTANTS.PRESENTATION_LOAD_FAILURE,\n  payload,\n});\nconst loadSuccess = (payload) => {\n  let data = JSON.parse(payload.data).result;\n  return {\n    type: USERS_CONSTANTS.USERS_LIST_LOAD_SUCCESS,\n    data: data.presos,\n    stats: data.stats,\n    vendors: data.vendors,\n  };\n};\nexport const getPresentations = (criteria, pagination = false) => {\n  let url = URLS.UserListURL;\n\n  return (dispatch) => {\n    dispatch(loadRequest(pagination));\n    apiRequest(\"GET\", url)\n      .then((result) => {\n        console.log(\"Get users List\", result);\n        const data = JSON.parse(JSON.parse(result).data);\n        console.log(\"getUsers\", data);\n        if (data.error) {\n          dispatch(loadFailure(data.error));\n        } else {\n          dispatch(loadSuccess(JSON.parse(result)));\n        }\n      })\n      .catch((err) => {\n        console.log(\"Get user list error\", err);\n        dispatch(loadFailure(\"error\"));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}